import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.darkhax.curseforgegradle' version '1.0.11'
    id 'com.matyrobbrt.mc.registrationutils' version "$reg_version"
}

registrationUtils {
    group 'com.matyrobbrt.mobcapturingtool.reg'
    projects {
        Fabric {}
        Quilt {}
        Forge {}
        Common {}
    }
}

class ProjectInfo {
    String name
    String jarTask
    ProjectInfo(String name, String jarTask) {
        this.name = name
        this.jarTask = jarTask
    }
}

static ProjectInfo info(String name, String jarTask = 'jar') {
    return new ProjectInfo(name, jarTask);
}

final var project2Loader = Map.of(
        findProject(':Forge'), info('Forge'),
        findProject(':Fabric'), info('Fabric', 'remapJar'),
        findProject(':Quilt'), info('Quilt', 'remapJar')
)

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    it.apiToken = findProperty('curseforgeKey')
    it.group = 'publishing'
    it.disableVersionDetection()

    var projectId = findProperty('curseforge_project')
    project2Loader.forEach { proj, loader ->
        var modFile = it.upload(projectId, proj.tasks.getByName(loader.getJarTask()))
        modFile.changelog = rootProject.file('changelog.txt')
        modFile.releaseType = findProperty('release_type')
        modFile.displayName = "$mod_name-${loader.getName()}-$minecraft_version-$version" as String
        modFile.addJavaVersion 'Java 17'
        modFile.addModLoader loader.getName()
        modFile.addGameVersion "$minecraft_version"
    }
}

subprojects {
    apply plugin: 'java'
    
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()
        
    jar {
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version,
                'Built-On-Reg'            : reg_version
            ])
        }
    }
    
    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            name 'Quilt (Release)'
            url 'https://maven.quiltmc.org/repository/release/'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release.set(17)
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}