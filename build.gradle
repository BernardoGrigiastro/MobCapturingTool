import net.darkhax.curseforgegradle.TaskPublishCurseForge
import com.matyrobbrt.mobcapturingtool.gradle.*

plugins {
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8"
    id 'net.darkhax.curseforgegradle' version '1.0.11'
    id 'com.matyrobbrt.mc.registrationutils' version "$reg_version"
    id 'com.modrinth.minotaur' version "2.+" apply false
    id 'maven-publish'
}

registrationUtils {
    group 'com.matyrobbrt.mobcapturingtool.reg'
    projects {
        Fabric {}
        NeoForge {}
        Common {}
    }
}

class ProjectInfo {
    String name
    String jarTask
    ProjectInfo(String name, String jarTask) {
        this.name = name
        this.jarTask = jarTask
    }
}

static ProjectInfo info(String name, String jarTask = 'jar') {
    return new ProjectInfo(name, jarTask)
}

final var project2Loader = Map.of(
        findProject(':NeoForge'), info('NeoForge'),
        findProject(':Fabric'), info('Fabric', 'remapJar')
)

project.tasks.register('multiloaderJar', MultiLoaderJarTask) {
    group = 'build'
    forgeJar.set(project.project(':NeoForge').tasks.named('jar', Jar).flatMap { it.archiveFile })
    fabricJar.set(project.project(':Fabric').tasks.named('remapJar', org.gradle.jvm.tasks.Jar).flatMap { it.archiveFile })
    archiveGroup.set('com.matyrobbrt.mobcapturingtool')
    archiveIdentifier.set('mobcapturingtool')
    archiveVersion.set(project.version.toString())
    manifest.mainAttributes.putValue('FMLModType', 'GAMELIBRARY')
    manifest.mainAttributes.putValue('Implementation-Version', project.version.toString())
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    it.apiToken = findProperty('curseforgeKey')
    it.group = 'publish-all'
    it.disableVersionDetection()

    var projectId = findProperty('curseforge_project')
    project2Loader.forEach { proj, loader ->
	    var tsk = proj.tasks.getByName(loader.getJarTask())
        var modFile = it.upload(projectId, tsk)
        modFile.changelog = rootProject.file('changelog.txt')
        modFile.releaseType = findProperty('release_type')
        modFile.displayName = "$mod_name-${loader.getName()}-$minecraft_version-$version" as String
        modFile.addJavaVersion 'Java 21'
        modFile.addModLoader loader.getName()
        modFile.addGameVersion "$minecraft_version"
        dependsOn(tsk)
    }
}
project2Loader.forEach { proj, loader ->
    tasks.register("publish${loader.name}CurseForge", TaskPublishCurseForge) {
        it.apiToken = findProperty('curseforgeKey')
        it.group = 'publishing'
        it.disableVersionDetection()

        var projectId = findProperty('curseforge_project')
        var tsk = proj.tasks.getByName(loader.getJarTask())
        var modFile = it.upload(projectId, tsk)
        modFile.changelog = rootProject.file('changelog.txt')
        modFile.releaseType = findProperty('release_type')
        modFile.displayName = "$mod_name-${loader.getName()}-$minecraft_version-$version" as String
        modFile.addJavaVersion 'Java 17'
        modFile.addModLoader loader.getName()
        modFile.addGameVersion "$minecraft_version"
        dependsOn(tsk)
    }
}

tasks.register('publishModrinth') {
    it.group = 'publish-all'
    getAllprojects().stream()
            .filter(pr -> pr.tasks.stream().anyMatch(t -> t.name == 'modrinth'))
            .map(pr -> pr.tasks.getByName('modrinth'))
            .forEach(it::dependsOn)
}

subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(21)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version,
                'Built-On-Reg'            : reg_version
            ])
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release.set(21)
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }


    if (project.name != 'Common') {
        apply plugin: 'com.modrinth.minotaur'
        afterEvaluate {
            modrinth {
                final var info = project2Loader.get(project)
                token = findProperty('modrinthToken')
                projectId = "$modrinth_project"
                // versionNumber "${project.version}-${info.getName().toLowerCase()}"
                versionType = "$release_type"
                gameVersions = ["$minecraft_version"]
                loaders = [info.getName().toLowerCase()]
                uploadFile = tasks.getByName(info.getJarTask())
            }
        }
    }
}
